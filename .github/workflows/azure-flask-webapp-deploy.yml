name: Deploy Flask App to Azure Web App

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: ga-hwaffmb0eqajfza5
  PYTHON_VERSION: '3.11'
  WEBAPP_PACKAGE_PATH: '.'

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: 'Production'
      url: https://ga-hwaffmb0eqajfza5.westeurope-01.azurewebsites.net

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Create deployment package for Flask app
      run: |
        # Create deployment directory
        mkdir flask-deployment
        
        # Copy essential Flask application files
        cp app.py flask-deployment/ 2>/dev/null || echo "app.py not found"
        cp main.py flask-deployment/ 2>/dev/null || echo "main.py not found"
        cp models.py flask-deployment/ 2>/dev/null || echo "models.py not found"
        cp staffing_app.py flask-deployment/ 2>/dev/null || echo "staffing_app.py not found"
        cp always_on_service.py flask-deployment/ 2>/dev/null || echo "always_on_service.py not found"
        
        # Copy directories
        if [ -d "static" ]; then
          cp -r static flask-deployment/
          echo "Copied static directory"
        fi
        
        if [ -d "templates" ]; then
          cp -r templates flask-deployment/
          echo "Copied templates directory"
        fi
        
        if [ -d "services" ]; then
          cp -r services flask-deployment/
          echo "Copied services directory"
        fi
        
        # Create requirements.txt for Flask app
        cat > flask-deployment/requirements.txt << 'EOF'
        Flask==3.0.0
        flask-login==0.6.3
        flask-sqlalchemy==3.1.1
        flask-wtf==1.2.1
        gunicorn==21.2.0
        requests==2.31.0
        sqlalchemy==2.0.23
        werkzeug==3.0.1
        psycopg2-binary==2.9.9
        wtforms==3.1.1
        python-dotenv==1.0.0
        Jinja2==3.1.2
        EOF
        
        # Create main.py if it doesn't exist
        if [ ! -f "flask-deployment/main.py" ]; then
          cat > flask-deployment/main.py << 'EOF'
        import os
        import logging
        from app import app, db
        
        # Configure logging
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
        logger = logging.getLogger(__name__)
        
        # Azure production environment detection
        is_azure_production = "WEBSITE_HOSTNAME" in os.environ
        logger.info(f"Environment: {'Azure Production' if is_azure_production else 'Development'}")
        
        # Import application components
        try:
            import models
            import staffing_app
            logger.info("Growth Accelerator Platform components loaded")
        except Exception as e:
            logger.warning(f"Component import: {e}")
        
        # Initialize database
        with app.app_context():
            try:
                db.create_all()
                logger.info("Database initialized")
            except Exception as e:
                logger.info(f"Database setup: {e}")
        
        # Configure for Azure production
        if is_azure_production:
            app.config['ENV'] = 'production'
            app.config['DEBUG'] = False
            app.config['PREFERRED_URL_SCHEME'] = 'https'
            logger.info("Azure production configuration applied")
        
        if __name__ == "__main__":
            port = int(os.environ.get("PORT", 8000))
            logger.info(f"Starting Growth Accelerator Platform on port {port}")
            app.run(host="0.0.0.0", port=port, debug=not is_azure_production)
        EOF
        fi
        
        # Create startup command for Azure
        echo "gunicorn --bind 0.0.0.0:8000 --timeout 600 main:app" > flask-deployment/startup.txt
        
        # Show deployment structure
        echo "=== Flask Deployment Package ==="
        find flask-deployment -type f | head -20

    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_8A6E7F23A8CB4D8789F7A34B8A2C9E15 }}
        package: flask-deployment

    - name: Verify Flask deployment
      run: |
        echo "Waiting for Flask app deployment..."
        sleep 60
        
        # Test Flask application endpoints
        echo "Testing Flask application..."
        
        if curl -f -s --max-time 30 "https://ga-hwaffmb0eqajfza5.westeurope-01.azurewebsites.net/health" | grep -q "healthy"; then
          echo "✅ Flask health check passed"
        elif curl -f -s --max-time 30 "https://ga-hwaffmb0eqajfza5.westeurope-01.azurewebsites.net/" | grep -q "Growth Accelerator"; then
          echo "✅ Flask application is responding"
        else
          echo "⚠️ Flask application verification needs more time"
        fi
        
        echo "Flask deployment process completed"